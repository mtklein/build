#!/usr/bin/env python3

import glob
import os
import subprocess
import sys

sys.stdout = open('build.ninja', 'w')

print('''
builddir = out

rule compile
  command = $cc -g -O1 -Werror -fdiagnostics-color -MD -MF $out.d -c $in -o $out
  depfile = $out.d
  deps    = gcc

rule link
  command = $cc $in -o $out

rule run
  command = $runtime ./$in > $out
''')

modes = {}
for pat in [ '/usr/bin/clang'
           , '/opt/homebrew/bin/zig'
           , '/opt/homebrew/opt/gcc/bin/gcc-[0-9][0-9]'
           , '/opt/homebrew/opt/llvm/bin/clang-[0-9][0-9]'
           ]:
    for cmd in glob.glob(pat):
        name = os.path.basename(cmd)
        flags = [ '-Weverything'
                , '-Wno-declaration-after-statement'
                , '-Wno-poison-system-directories'
                , '-Wno-unsafe-buffer-usage'
                ] if 'clang' in name or 'zig' in name else ['-Wall', '-Wextra']
        if 'zig' in name:
            cmd = f'{cmd} cc'
        print(f'{name} = {cmd} {" ".join(flags)}\n')
        modes[name] = ''

print('''
asan = $clang -fno-sanitize-recover=all -fsanitize=address,integer,undefined
tsan = $clang -fno-sanitize-recover=all -fsanitize=thread
lto  = $clang -flto
x86  = $clang -arch x86_64 -arch x86_64h
wasm = $zig -target wasm32-wasi
''')
modes.update(clang='leaks -quiet -noContent --atExit --',
             asan='', tsan='', lto='', x86='', wasm='wasmer')

srcs = subprocess.run(['git', 'ls-files', '*.c']    ,stdout=subprocess.PIPE).stdout.decode().split()
main = subprocess.run(['git', 'grep', '-l', 'main('],stdout=subprocess.PIPE).stdout.decode().split()
rest = [src for src in srcs if src not in main]

for cc in modes:
    target = lambda src: f'out/{cc}/{os.path.splitext(src)[0]}'
    for src in srcs:
        print(f'build {target(src)}.o: compile {src}\n  cc=${cc}\n')
    for src in main:
        print(f'build {target(src)}: link {target(src)}.o'
              f' {" ".join(target(dep)+".o" for dep in rest)}\n  cc=${cc}\n')
        if 'test' in src:
            print(f'build {target(src)}.ok: run {target(src)}\n  runtime={modes[cc]}\n')

sys.stdout.close()
rc = subprocess.call(['ninja'] + sys.argv[1:])
if rc == 0:
    os.remove('build.ninja')
    subprocess.call(['git', 'add', '-u'])
sys.exit(rc)
