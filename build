#!/usr/bin/env python3

import glob
import os
import subprocess
import sys

def stdout(*cmd):
    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode()

with open('build.ninja', 'w') as b:
    b.write('''
builddir = out

rule compile
  command = $cc -O1 -momit-leaf-frame-pointer -g -Werror -fdiagnostics-color -MD -MF $out.d $
                -c $in -o $out
  depfile = $out.d
  deps    = gcc

rule link
  command = $cc $in -o $out

rule run
  command = ./$in > $out
''')

    modes = []
    for pat in ['/usr/bin/clang', '/opt/homebrew/opt/llvm/bin/clang-[0-9][0-9]',
                '/usr/bin/gcc'  , '/opt/homebrew/opt/gcc/bin/gcc-[0-9][0-9]',
                '/usr/bin/tcc']:
        for cmd in glob.glob(pat):
            name = os.path.basename(cmd)
            if 'gcc' in name and 'clang' in stdout(cmd, '--version'):
                continue
            w = ['-Wall', '-Wextra']
            if 'clang' in name:
                w = ['-Weverything'
                     , '-Wno-declaration-after-statement'
                     , '-Wno-poison-system-directories'
                     , '-Wno-unsafe-buffer-usage'
                     ]
            b.write(f'{name} = {cmd} {" ".join(w)}\n')
            modes.append(name)

    if 'clang' in modes:
        b.write('''
asan = $clang -fno-sanitize-recover=all -fsanitize=address,integer,undefined
msan = $clang -fno-sanitize-recover=all -fsanitize=memory -fsanitize-memory-track-origins
tsan = $clang -fno-sanitize-recover=all -fsanitize=thread
lto  = $clang -flto
nat  = $clang -march=native
x86  = $clang -arch x86_64 -arch x86_64h
''')
        modes += ['asan','tsan','lto','nat']
        if sys.platform.startswith('linux'):
            modes += ['msan']
        if sys.platform.startswith('darwin'):
            modes += ['x86']

    srcs = stdout('git', 'ls-files', '*.c').split()
    main = stdout('git', 'grep', '-l', 'main(', *srcs).split()
    rest = [src for src in srcs if src not in main]

    for cc in modes:
        target = lambda src: f'out/{cc}/{os.path.splitext(src)[0]}'
        for src in srcs:
            b.write(f'build {target(src)}.o: compile {src}\n  cc=${cc}\n')
        for src in main:
            b.write(f'build {target(src)}: link {target(src)}.o'
                    f' {" ".join(target(src)+".o" for src in rest)}\n  cc=${cc}\n')
            if 'test' in src:
                b.write(f'build {target(src)}.ok: run {target(src)}\n')

rc = subprocess.call(['ninja'] + sys.argv[1:])
if rc == 0:
    os.remove('build.ninja')
    subprocess.call(['git', 'add', '-u'])
sys.exit(rc)
