#!/usr/bin/env python3

import os
import subprocess
import sys

def stdout(*cmd):
    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode()

with open('build.ninja', 'w') as b:
    b.write('''
builddir = out

gcc   = gcc   -Wall -Wextra
tcc   = tcc   -Wall
clang = clang -Weverything $
              -Wno-declaration-after-statement $
              -Wno-poison-system-directories $
              -Wno-unsafe-buffer-usage $

asan = $clang -fno-sanitize-recover=all -fsanitize=address,integer,undefined
msan = $clang -fno-sanitize-recover=all -fsanitize=memory -fsanitize-memory-track-origins
tsan = $clang -fno-sanitize-recover=all -fsanitize=thread
lto  = $clang -flto

rule compile
  command = $cc -O1 -march=native -g -Werror -fdiagnostics-color -MD -MF $out.d -c $in -o $out
  depfile = $out.d
  deps    = gcc

rule link
  command = $cc $in -o $out

rule run
  command = ./$in > $out
''')

    srcs = stdout('git', 'ls-files', '*.c').split()
    main = stdout('git', 'grep', '-l', 'main(', *srcs).split()
    rest = [src for src in srcs if src not in main]

    for cc in ['gcc','tcc','clang', 'asan','msan','tsan','lto']:
        target = lambda src: f'out/{cc}/{os.path.splitext(src)[0]}'
        for src in srcs:
            b.write(f'build {target(src)}.o: compile {src}\n  cc=${cc}\n')
        for src in main:
            b.write(f'build {target(src)}: link {target(src)}.o'
                    f' {" ".join(target(src)+".o" for src in rest)}\n  cc=${cc}\n')
            if 'test' in src:
                b.write(f'build {target(src)}.ok: run {target(src)}\n')

rc = subprocess.call(['ninja'] + sys.argv[1:])
if rc == 0:
    os.remove('build.ninja')
    subprocess.call(['git', 'add', '-u'])
sys.exit(rc)
