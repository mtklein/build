#!/usr/bin/env python3

import os
import subprocess
import sys

def call(cmd):
    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode().split()

with open('build.ninja', 'w') as b:
    b.write('''
builddir = out

clang = clang -Weverything $
              -Wno-poison-system-directories $
              -Wno-declaration-after-statement $
              -Wno-unsafe-buffer-usage

rule compile
  command = $cc -g -Werror -fdiagnostics-color -MD -MF $out.d -c $in -o $out
  depfile = $out.d
  deps    = gcc

rule link
  command = $cc $ldflags $in -o $out

rule run
  command = $runtime ./$in > $out
''')

    modes = {
        'dbg':  ('', '$clang -fno-sanitize-recover=all -fsanitize=address,integer,undefined'),
        'tsan': ('', '$clang -fno-sanitize-recover=all -fsanitize=thread'),
        'opt':  ('', '$clang -Os -DNDEBUG -march=native'),
        'lto':  ('', '$clang -Os -DNDEBUG -march=native -flto'),
        'gcc':  ('', 'gcc    -Os -DNDEBUG -march=native -Wall -Wextra'),
    }
    if sys.platform.startswith('darwin'):
        b.write('ldflags = -Wl,-dead_strip\n')
        modes.update({
            'x86':  (      '', '$clang -Os -DNDEBUG -arch x86_64 -arch x86_64h'),
            'gcc':  (      '', 'gcc-13 -Os -Wall -Wextra'),
            'wasm': ('wasmer', 'zig cc -Os -target wasm32-wasi'),
        })

    srcs = call(['git', 'ls-files', '*.c'])
    main = call(['git', 'grep', '-l', 'main('] + srcs)
    rest = [src for src in srcs if src not in main]

    for mode,(runtime,cc) in modes.items():
        def target(src):
            return os.path.join('out', mode, os.path.splitext(src)[0])
        for src in srcs:
            b.write(f'build {target(src)}.o: compile {src}\n  cc={cc}\n')
        for src in main:
            b.write(f'build {target(src)}: link {target(src)}.o'
                    f' {" ".join(target(src)+".o" for src in rest)}\n  cc={cc}\n')
            if 'test' in src:
                b.write(f'build {target(src)}.ok: run {target(src)}\n  runtime={runtime}\n')

rc = subprocess.call(['ninja'] + sys.argv[1:])
if rc == 0:
    os.remove('build.ninja')
    subprocess.call(['git', 'add', '-u'])
sys.exit(rc)
