#!/usr/bin/env python3

import glob
import os
import subprocess
import sys

sys.stdout = open('build.ninja', 'w')

print('''
builddir = out

rule compile
  command = $cc -g -O1 -Werror -fdiagnostics-color -MD -MF $out.d -c $in -o $out
  depfile = $out.d
  deps    = gcc

rule deps
  command = deps $in > $out

rule link
  command = $cc -dead_strip $in $$(grep $out $dyndep | cut -d\\| -f 2) -o $out

rule run
  command = $runtime ./$in > $out

rule diff
  command = git diff --no-index $in > $out
''')

modes = {}
for pat in [ '/usr/bin/clang'
           , '/opt/homebrew/bin/zig'
           , '/opt/homebrew/opt/gcc/bin/gcc-[0-9][0-9]'
           , '/opt/homebrew/opt/llvm/bin/clang-[0-9][0-9]'
           ]:
    for cmd in glob.glob(pat):
        name = os.path.basename(cmd)
        flags = [ '-Weverything'
                , '-Wno-declaration-after-statement'
                , '-Wno-poison-system-directories'
                , '-Wno-pre-c11-compat'
                , '-Wno-unknown-warning-option'
                , '-Wno-unsafe-buffer-usage'
                ] if 'clang' in name or 'zig' in name else ['-Wall', '-Wextra']
        if 'zig' in name:
            cmd = f'{cmd} cc'
        print(f'{name} = {cmd} {" ".join(flags)}')
        modes[name] = ''

print('''
leak = $clang
asan = $clang -fno-sanitize-recover=all -fsanitize=address,integer,undefined
tsan = $clang -fno-sanitize-recover=all -fsanitize=thread
lto  = $clang -flto
x86  = $clang -arch x86_64
avx  = $clang -arch x86_64 -march=ivybridge
wasm = $zig -target wasm32-wasi -msimd128 -mcpu=generic+tail_call
''')
# TODO: test failures don't cause leaks to fail.  If fixed, $leak can fold back into $clang.
modes.update(leak='leaks -quiet -noContent --atExit --',
             asan='', tsan='', lto='', x86='', avx='', wasm='wasmtime run --dir .')

srcs = subprocess.run(['git', 'ls-files', '*.c']    ,stdout=subprocess.PIPE).stdout.decode().split()
main = subprocess.run(['git', 'grep', '-l', 'main('],stdout=subprocess.PIPE).stdout.decode().split()
want = subprocess.run(['git', 'ls-files', '*.want'] ,stdout=subprocess.PIPE).stdout.decode().split()
rest = [src for src in srcs if src not in main]

for cc in modes:
    objs = []
    for src in srcs:
        obj = f'out/{cc}/{os.path.splitext(src)[0]}.o'
        print(f'build {obj}: compile {src}')
        print(f'  cc=${cc}')
        objs.append(obj)

    print(f'build out/{cc}/link.dyndep: deps {" ".join(objs)}')

    for src in main:
        target = f'out/{cc}/{os.path.splitext(src)[0]}'
        print(f'build {target}: link {target}.o || out/{cc}/link.dyndep')
        print(f'  cc=${cc}')
        print(f'  dyndep=out/{cc}/link.dyndep')
        if 'test' in src:
            print(f'build {target}.ok: run {target}')
            print(f'  runtime={modes[cc]}')

    for path in want:
        target = f'out/{cc}/{os.path.splitext(path)[0]}'
        print(f'build {target}.got: run {target}')
        print(f'  runtime={modes[cc]}')
        if cc not in {'leak'}:
            print(f'build {target}.ok: diff {target}.got {path}')

sys.stdout.close()
rc = subprocess.call(['ninja'] + sys.argv[1:])
if rc == 0:
    os.remove('build.ninja')
    subprocess.call(['git', 'add', '-u'])
sys.exit(rc)
